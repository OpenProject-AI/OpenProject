name: Build Executable and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Check if prompt.txt exists
        run: |
          if [ ! -f ./Functions/prompt.txt ]; then
            echo "Error: ./Functions/prompt.txt does not exist!"
            exit 1
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            **/requirements*.txt

      - name: Install your Dependencies
        run: |
          pip install -r requirements.txt

      - name: Verify Installed Dependencies
        run: |
          pip list

      - name: Build Executable with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: 1.8.0  # Use a stable version
          script-name: main.py
          mode: app
          include-data-dir: |
            ./Functions/prompt.txt=Functions/prompt.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }} Build
          path: |
            build/
          include-hidden-files: true

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Generate Release Tag
        id: get-timestamp
        run: echo "RELEASE_TAG=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          release_name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false

      - name: Upload Build Artifacts to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/
          asset_name: build_${{ runner.os }}_${{ env.RELEASE_TAG }}.zip
          asset_content_type: application/zip
